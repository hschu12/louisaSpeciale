flow_sum_arf = 0
flow_sum_arp = 0
flow_sum_ars = 0
flow_sum_acf = 0
flow_sum_acp = 0
flow_sum_acs = 0
flow_sum_atf = 0
flow_sum_atp = 0
flow_sum_ats = 0
rows_rrf = 0
rows_rrp = 0
rows_rrs = 0
rows_rcf = 0
rows_rcp = 0
rows_rcs = 0
rows_rtf = 0
rows_rtp = 0
rows_rts = 0
rows_crf = 0
rows_crp = 0
rows_crs = 0
rows_ccf = 0
rows_ccp = 0
rows_ccs = 0
rows_ctf = 0
rows_ctp = 0
rows_cts = 0
rows_arf = 0
rows_arp = 0
rows_ars = 0
rows_acf = 0
rows_acp = 0
rows_acs = 0
rows_atf = 0
rows_atp = 0
rows_ats = 0
crf_list = list()
for (i in 1:nrow(comb)) {
comb$percentage[i] = comb$best.max.flow[i] / comb$initial.max.flow[i]
if (comb$construction.heuristic[i] == 'rand'){
if (comb$flip.fct[i] == 'rand'){
if (comb$step.fct[i] == 'first'){
pct_sum_rrf = pct_sum_rrf + comb$percentage[i]
flow_sum_rrf = flow_sum_rrf + comb$best.max.flow[i]
rows_rrf = rows_rrf +1
comb$comb[i] = 1
}
if (comb$step.fct[i] == 'prob'){
pct_sum_rrp = pct_sum_rrp + comb$percentage[i]
flow_sum_rrp = flow_sum_rrp + comb$best.max.flow[i]
rows_rrp = rows_rrp +1
comb$comb[i] = 2
}
if (comb$step.fct[i] == 'sim'){
pct_sum_rrs = pct_sum_rrs + comb$percentage[i]
flow_sum_rrs = flow_sum_rrs + comb$best.max.flow[i]
rows_rrs = rows_rrs +1
comb$comb[i] = 3
}
}
if (comb$flip.fct[i] == 'cap'){
if (comb$step.fct[i] == 'first'){
pct_sum_rcf = pct_sum_rcf + comb$percentage[i]
flow_sum_rcf = flow_sum_rcf + comb$best.max.flow[i]
rows_rcf = rows_rcf +1
comb$comb[i] = 4
}
if (comb$step.fct[i] == 'prob'){
pct_sum_rcp = pct_sum_rcp + comb$percentage[i]
flow_sum_rcp = flow_sum_rcp + comb$best.max.flow[i]
rows_rcp = rows_rcp +1
comb$comb[i] = 5
}
if (comb$step.fct[i] == 'sim'){
pct_sum_rcs = pct_sum_rcs + comb$percentage[i]
flow_sum_rcs = flow_sum_rcs + comb$best.max.flow[i]
rows_rcs = rows_rcs +1
comb$comb[i] = 6
}
}
if (comb$flip.fct[i] == 'tabu'){
if (comb$step.fct[i] == 'first'){
pct_sum_rtf = pct_sum_rtf + comb$percentage[i]
flow_sum_rtf = flow_sum_rtf + comb$best.max.flow[i]
rows_rtf = rows_rtf +1
comb$comb[i] = 7
}
if (comb$step.fct[i] == 'prob'){
pct_sum_rtp = pct_sum_rtp + comb$percentage[i]
flow_sum_rtp = flow_sum_rtp + comb$best.max.flow[i]
rows_rtp = rows_rtp +1
comb$comb[i] = 8
}
if (comb$step.fct[i] == 'sim'){
pct_sum_rts = pct_sum_rts + comb$percentage[i]
flow_sum_rts = flow_sum_rts + comb$best.max.flow[i]
rows_rts = rows_rts +1
comb$comb[i] = 9
}
}
}
if (comb$construction.heuristic[i] == 'cut'){
if (comb$flip.fct[i] == 'rand'){
if (comb$step.fct == 'first'){
pct_sum_crf = pct_sum_crf + comb$percentage[i]
flow_sum_crf = flow_sum_crf + comb$best.max.flow[i]
rows_crf = rows_crf +1
comb$comb[i] = 10
crf_list = c(crf_list,i)
}
if (comb$step.fct[i] == 'prob'){
pct_sum_crp = pct_sum_crp + comb$percentage[i]
flow_sum_crp = flow_sum_crp + comb$best.max.flow[i]
rows_crp = rows_crp +1
comb$comb[i] = 11
}
if (comb$step.fct[i] == 'sim'){
pct_sum_crs = pct_sum_crs + comb$percentage[i]
flow_sum_crs = flow_sum_crs + comb$best.max.flow[i]
rows_crs = rows_crs +1
comb$comb[i] = 12
}
}
if (comb$flip.fct[i] == 'cap'){
if (comb$step.fct[i] == 'first'){
pct_sum_ccf = pct_sum_ccf + comb$percentage[i]
flow_sum_ccf = flow_sum_ccf + comb$best.max.flow[i]
rows_ccf = rows_ccf +1
comb$comb[i] = 13
}
if (comb$step.fct[i] == 'prob'){
pct_sum_ccp = pct_sum_ccp + comb$percentage[i]
flow_sum_ccp = flow_sum_ccp + comb$best.max.flow[i]
rows_ccp = rows_ccp +1
comb$comb[i] = 14
}
if (comb$step.fct[i] == 'sim'){
pct_sum_ccs = pct_sum_ccs + comb$percentage[i]
flow_sum_ccs = flow_sum_ccs + comb$best.max.flow[i]
rows_ccs = rows_ccs +1
comb$comb[i] = 15
}
}
if (comb$flip.fct[i] == 'tabu'){
if (comb$step.fct[i] == 'first'){
pct_sum_ctf = pct_sum_ctf + comb$percentage[i]
flow_sum_ctf = flow_sum_ctf + comb$best.max.flow[i]
rows_ctf = rows_ctf +1
comb$comb[i] = 16
}
if (comb$step.fct[i] == 'prob'){
pct_sum_ctp = pct_sum_ctp + comb$percentage[i]
flow_sum_ctp = flow_sum_ctp + comb$best.max.flow[i]
rows_ctp = rows_ctp +1
comb$comb[i] = 17
}
if (comb$step.fct[i] == 'sim'){
pct_sum_cts = pct_sum_cts + comb$percentage[i]
flow_sum_cts = flow_sum_cts + comb$best.max.flow[i]
rows_cts = rows_cts +1
comb$comb[i] = 18
}
}
}
if (comb$construction.heuristic[i] == 'card'){
if (comb$flip.fct[i] == 'rand'){
if (comb$step.fct[i] == 'first'){
pct_sum_arf = pct_sum_arf + comb$percentage[i]
flow_sum_arf = flow_sum_arf + comb$best.max.flow[i]
rows_arf = rows_arf +1
comb$comb[i] = 19
}
if (comb$step.fct[i] == 'prob'){
pct_sum_arp = pct_sum_arp + comb$percentage[i]
flow_sum_arp = flow_sum_arp + comb$best.max.flow[i]
rows_arp = rows_arp +1
comb$comb[i] = 20
}
if (comb$step.fct[i] == 'sim'){
pct_sum_ars = pct_sum_ars + comb$percentage[i]
flow_sum_ars = flow_sum_ars + comb$best.max.flow[i]
rows_ars = rows_ars +1
comb$comb[i] = 21
}
}
if (comb$flip.fct[i] == 'cap'){
if (comb$step.fct[i] == 'first'){
pct_sum_acf = pct_sum_acf + comb$percentage[i]
flow_sum_acf = flow_sum_acf + comb$best.max.flow[i]
rows_acf = rows_acf +1
comb$comb[i] = 22
}
if (comb$step.fct[i] == 'prob'){
pct_sum_acp = pct_sum_acp + comb$percentage[i]
flow_sum_acp = flow_sum_acp + comb$best.max.flow[i]
rows_acp = rows_acp +1
comb$comb[i] = 23
}
if (comb$step.fct[i] == 'sim'){
pct_sum_acs = pct_sum_acs + comb$percentage[i]
flow_sum_acs = flow_sum_acs + comb$best.max.flow[i]
rows_acs = rows_acs +1
comb$comb[i] = 24
}
}
if (comb$flip.fct[i] == 'tabu'){
if (comb$step.fct[i] == 'first'){
pct_sum_atf = pct_sum_atf + comb$percentage[i]
flow_sum_atf = flow_sum_atf + comb$best.max.flow[i]
rows_atf = rows_atf +1
comb$comb[i] = 25
}
if (comb$step.fct[i] == 'prob'){
pct_sum_atp = pct_sum_atp + comb$percentage[i]
flow_sum_atp = flow_sum_atp + comb$best.max.flow[i]
rows_atp = rows_atp +1
comb$comb[i] = 26
}
if (comb$step.fct[i] == 'sim'){
pct_sum_ats = pct_sum_ats + comb$percentage[i]
flow_sum_ats = flow_sum_ats + comb$best.max.flow[i]
rows_ats = rows_ats +1
comb$comb[i] = 27
}
}
}
}
# Calculate average percentage for comb's
avr_pct_rrf = pct_sum_rrf/rows_rrf
avr_pct_rrp = pct_sum_rrp/rows_rrp
avr_pct_rrs = pct_sum_rrs/rows_rrs
avr_pct_rcf = pct_sum_rcf/rows_rcf
avr_pct_rcp = pct_sum_rcp/rows_rcp
avr_pct_rcs = pct_sum_rcs/rows_rcs
avr_pct_rtf = pct_sum_rtf/rows_rtf
avr_pct_rtp = pct_sum_rtp/rows_rtp
avr_pct_rts = pct_sum_rts/rows_rts
avr_pct_crf = pct_sum_crf/rows_crf
avr_pct_crp = pct_sum_crp/rows_crp
avr_pct_crs = pct_sum_crs/rows_crs
avr_pct_ccf = pct_sum_ccf/rows_ccf
avr_pct_ccp = pct_sum_ccp/rows_ccp
avr_pct_ccs = pct_sum_ccs/rows_ccs
avr_pct_ctf = pct_sum_ctf/rows_ctf
avr_pct_ctp = pct_sum_ctp/rows_ctp
avr_pct_cts = pct_sum_cts/rows_cts
avr_pct_arf = pct_sum_arf/rows_arf
avr_pct_arp = pct_sum_arp/rows_arp
avr_pct_ars = pct_sum_ars/rows_ars
avr_pct_acf = pct_sum_acf/rows_acf
avr_pct_acp = pct_sum_acp/rows_acp
avr_pct_acs = pct_sum_acs/rows_acs
avr_pct_atf = pct_sum_atf/rows_atf
avr_pct_atp = pct_sum_atp/rows_atp
avr_pct_ats = pct_sum_ats/rows_ats
# Create boxplot of percentage max-flow remainig ~ comb
boxplot(percentage~comb,data=comb, main="Combinations of heuristics for Local Search",
xlab="Combination Index", ylab="Percentage remaining of max-flow")
# Create boxplot of best max-flow remainig ~ comb
boxplot(best.max.flow~comb,data=comb, main="Combinations of heuristics for Local Search",
xlab="Combination Index", ylab="Best max-flow values")
# Find average best max-flow values
avr_rrf = flow_sum_rrf/rows_rrf
avr_rrp = flow_sum_rrp/rows_rrp
avr_rrs = flow_sum_rrs/rows_rrs
avr_rcf = flow_sum_rcf/rows_rcf
avr_rcp = flow_sum_rcp/rows_rcp
avr_rcs = flow_sum_rcs/rows_rcs
avr_rtf = flow_sum_rtf/rows_rtf
avr_rtp = flow_sum_rtp/rows_rtp
avr_rts = flow_sum_rts/rows_rts
avr_crf = flow_sum_crf/rows_crf
avr_crp = flow_sum_crp/rows_crp
avr_crs = flow_sum_crs/rows_crs
avr_ccf = flow_sum_ccf/rows_ccf
avr_ccp = flow_sum_ccp/rows_ccp
avr_ccs = flow_sum_ccs/rows_ccs
avr_ctf = flow_sum_ctf/rows_ctf
avr_ctp = flow_sum_ctp/rows_ctp
avr_cts = flow_sum_cts/rows_cts
avr_arf = flow_sum_arf/rows_arf
avr_arp = flow_sum_arp/rows_arp
avr_ars = flow_sum_ars/rows_ars
avr_acf = flow_sum_acf/rows_acf
avr_acp = flow_sum_acp/rows_acp
avr_acs = flow_sum_acs/rows_acs
avr_atf = flow_sum_atf/rows_atf
avr_atp = flow_sum_atp/rows_atp
avr_ats = flow_sum_ats/rows_ats
# Create plots of average best max flow and average percentage for each combination
avrp = c(avr_pct_rrf,avr_pct_rrp,avr_pct_rrs,
avr_pct_rcf,avr_pct_rcp,avr_pct_rcs,
avr_pct_rtf,avr_pct_rtp,avr_pct_rts,
avr_pct_crf,avr_pct_crp,avr_pct_crs,
avr_pct_ccf,avr_pct_ccp,avr_pct_ccs,
avr_pct_ctf,avr_pct_ctp,avr_pct_cts,
avr_pct_arf,avr_pct_arp,avr_pct_ars,
avr_pct_acf,avr_pct_acp,avr_pct_acs,
avr_pct_atf,avr_pct_atp,avr_pct_ats)
avr = c(avr_rrf,avr_rrp,avr_rrs,
avr_rcf,avr_rcp,avr_rcs,
avr_rtf,avr_rtp,avr_rts,
avr_crf,avr_crp,avr_crs,
avr_ccf,avr_ccp,avr_ccs,
avr_ctf,avr_ctp,avr_cts,
avr_arf,avr_arp,avr_ars,
avr_acf,avr_acp,avr_acs,
avr_atf,avr_atp,avr_ats)
comb_index = c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27)
plot(comb_index,avr,xlab='Combination Index',ylab='Average best max-flow value',main = 'Combinations of heuristics for Local Search')
plot(comb_index,avrp,xlab='Combination Index',ylab='Average percentage remaining max-flow',main='Combinations of heuristics for Local Search')
#
# Split up between best max flow > 2000 and > 200
#
biglist = list()
medlist = list()
smalllist = list()
for (i in 1:nrow(comb)){
if (comb$best.max.flow[i] > 2000){
biglist = c(biglist,i)
}
else{
if (comb$best.max.flow[i] > 200){
medlist = c(medlist,i)
}
else{
smalllist = c(smalllist,i)
}
}
}
# Create results where max flow > 2000
comb2000 = data.frame()
for (j in biglist){
comb2000 = rbind(comb2000,comb[j,])
}
# Create results where 2000 > max flow > 200
comb200 = data.frame()
for (j in medlist){
comb200 = rbind(comb200,comb[j,])
}
# Create results where max flow < 200
comb20 = data.frame()
for (j in smalllist){
comb20 = rbind(comb20,comb[j,])
}
# Create boxplot of best max-flow ~ comb index (SMALL)
boxplot(best.max.flow~comb,data=comb20, main="Heuristic combinations for Local Search (SMALL)",
xlab="Combination Index", ylab="Best max-flow of Local Search")
# Create boxplot of best max-flow ~ comb index (MED)
boxplot(best.max.flow~comb,data=comb200, main="Heuristic combinations for Local Search (MEDIUM)",
xlab="Combination Index", ylab="Best max-flow of Local Search")
# Create boxplot of best max-flow ~ p (LARGE)
boxplot(best.max.flow~comb,data=comb2000, main="Heuristic combinations for Local Search (LARGE)",
xlab="Combination Index", ylab="Best max-flow of Local Search")
#
# Split up between flip functions
#
avr_randflip = (avr_rrs+avr_rrp+avr_rrf+
avr_crs+avr_crp+avr_crf+
avr_ars+avr_arp+avr_arf)/9
avr_capflip = (avr_rcs+avr_rcp+avr_rcf+
avr_ccs+avr_ccp+avr_ccf+
avr_acs+avr_acp+avr_acf)/9
avr_tabuflip = (avr_rts+avr_rtp+avr_rtf+
avr_cts+avr_ctp+avr_ctf+
avr_ats+avr_atp+avr_atf)/9
avr_pct_randflip = (avr_pct_rrs+avr_pct_rrp+avr_pct_rrf+
avr_pct_crs+avr_pct_crp+avr_pct_crf+
avr_pct_ars+avr_pct_arp+avr_pct_arf)/9
avr_pct_tabuflip = (avr_pct_rts+avr_pct_rtp+avr_pct_rtf+
avr_pct_cts+avr_pct_ctp+avr_pct_ctf+
avr_pct_ats+avr_pct_atp+avr_pct_atf)/9
avr_pct_capflip = (avr_pct_rcs+avr_pct_rcp+avr_pct_rcf+
avr_pct_ccs+avr_pct_ccp+avr_pct_ccf+
avr_pct_acs+avr_pct_acp+avr_pct_acf)/9
avr_flip = c(avr_randflip,avr_capflip,avr_tabuflip)
avrp_flip = c(avr_pct_randflip,avr_pct_capflip,avr_pct_tabuflip)
#flip = lab('rand', 'cap', 'tabu')
flip = c(1,2,3)
plot(flip,avr_flip,xlab='Flip Function',ylab='Average best max-flow value',main = 'Combinations of heuristics for Local Search')
axis(1, at=1:3, lab('rand', 'cap', 'tabu'))
plot(flip,avrp_flip,xlab='Flip Function',ylab='Average percentage remaining max-flow',main='Combinations of heuristics for Local Search')
axis(1, at=1:3, lab('rand', 'cap', 'tabu'))
#
# Without random as construction heuristic
#
avr_randflip1 = (avr_crs+avr_crp+avr_crf+
avr_ars+avr_arp+avr_arf)/6
avr_capflip1 = (avr_ccs+avr_ccp+avr_ccf+
avr_acs+avr_acp+avr_acf)/6
avr_tabuflip1 = (avr_cts+avr_ctp+avr_ctf+
avr_ats+avr_atp+avr_atf)/6
avr_pct_randflip1 = (avr_pct_crs+avr_pct_crp+avr_pct_crf+
avr_pct_ars+avr_pct_arp+avr_pct_arf)/6
avr_pct_tabuflip1 = (avr_pct_cts+avr_pct_ctp+avr_pct_ctf+
avr_pct_ats+avr_pct_atp+avr_pct_atf)/6
avr_pct_capflip1 = (avr_pct_ccs+avr_pct_ccp+avr_pct_ccf+
avr_pct_acs+avr_pct_acp+avr_pct_acf)/6
avr_flip1 = c(avr_randflip1,avr_capflip1,avr_tabuflip1)
avrp_flip1 = c(avr_pct_randflip1,avr_pct_capflip1,avr_pct_tabuflip1)
#flip = c('rand', 'cap', 'tabu')
flip = c(1,2,3)
plot(flip,avr_flip1,xlab='Flip Function',ylab='Average best max-flow value',main = 'Combinations of heuristics for Local Search (%rand constr)')
plot(flip,avrp_flip1,xlab='Flip Function',ylab='Average percentage remaining max-flow',main='Combinations of heuristics for Local Search(%rand constr)')
#
# Split up between step functions
#
avr_firststep = (avr_rrf+avr_rcf+avr_rtf+
avr_crf+avr_ccf+avr_ctf+
avr_arf+avr_acf+avr_atf)/9
avr_probstep = (avr_rrp+avr_rcp+avr_rtp+
avr_crp+avr_ccp+avr_ctp+
avr_arp+avr_acp+avr_atp)/9
avr_simstep = (avr_rrs+avr_rcs+avr_rts+
avr_crs+avr_ccs+avr_cts+
avr_ars+avr_acs+avr_ats)/9
avr_pct_firststep = (avr_pct_rrf+avr_pct_rcf+avr_pct_rtf+
avr_pct_crf+avr_pct_ccf+avr_pct_ctf+
avr_pct_arf+avr_pct_acf+avr_pct_atf)/9
avr_pct_probstep = (avr_pct_rrp+avr_pct_rcp+avr_pct_rtp+
avr_pct_crp+avr_pct_ccp+avr_pct_ctp+
avr_pct_arp+avr_pct_acp+avr_pct_atp)/9
avr_pct_simstep = (avr_pct_rrs+avr_pct_rcs+avr_pct_rts+
avr_pct_crs+avr_pct_ccs+avr_pct_cts+
avr_pct_ars+avr_pct_acs+avr_pct_ats)/9
avr_step = c(avr_firststep,avr_probstep,avr_simstep)
avrp_step = c(avr_pct_firststep,avr_pct_probstep,avr_pct_simstep)
#flip = c('rand', 'cap', 'tabu')
step = c(1,2,3)
plot(step,avr_step,xlab='Step Function',ylab='Average best max-flow value',main = 'Combinations of heuristics for Local Search')
plot(step,avrp_step,xlab='Step Function',ylab='Average percentage remaining max-flow',main='Combinations of heuristics for Local Search')
#
# Without random as construction heuristic
#
avr_firststep1 = (avr_crf+avr_ccf+avr_ctf+
avr_arf+avr_acf+avr_atf)/6
avr_probstep1 = (avr_crp+avr_ccp+avr_ctp+
avr_arp+avr_acp+avr_atp)/6
avr_simstep1 = (avr_crs+avr_ccs+avr_cts+
avr_ars+avr_acs+avr_ats)/6
avr_pct_firststep1 = (avr_pct_crf+avr_pct_ccf+avr_pct_ctf+
avr_pct_arf+avr_pct_acf+avr_pct_atf)/6
avr_pct_probstep1 = (avr_pct_crp+avr_pct_ccp+avr_pct_ctp+
avr_pct_arp+avr_pct_acp+avr_pct_atp)/6
avr_pct_simstep1 = (avr_pct_crs+avr_pct_ccs+avr_pct_cts+
avr_pct_ars+avr_pct_acs+avr_pct_ats)/6
avr_step1 = c(avr_firststep1,avr_probstep1,avr_simstep1)
avrp_step1 = c(avr_pct_firststep1,avr_pct_probstep1,avr_pct_simstep1)
#flip = c('rand', 'cap', 'tabu')
step = c(1,2,3)
plot(step,avr_step1,xlab='Step Function',ylab='Average best max-flow value',main = 'Combinations of heuristics for Local Search(%rand constr)')
plot(step,avrp_step1,xlab='Step Function',ylab='Average percentage remaining max-flow',main='Combinations of heuristics for Local Search(%rand constr)')
#
# Looking for two combinations of:
# constr      cut   card
# flip        cap   tabu
# search      first  sim
final_combinations = c(13,15,16,18,22,24,25,27)
final_comb2000 = data.frame()
final_comb200 = data.frame()
final_comb20 = data.frame()
for (i in 1:nrow(comb2000)){
if (comb2000$comb[i] %in% final_combinations){
final_comb2000 = rbind(final_comb2000,comb2000[i,])
}
}
for (i in 1:nrow(comb200)){
if (comb200$comb[i] %in% final_combinations){
final_comb200 = rbind(final_comb200,comb200[i,])
}
}
for (i in 1:nrow(comb20)){
if (comb20$comb[i] %in% final_combinations){
final_comb20 = rbind(final_comb20,comb20[i,])
}
}
final_comb = do.call('rbind',list(final_comb20,final_comb200,final_comb2000))
# Create boxplot of percentage max-flow remainig ~ comb
boxplot(percentage~comb,data=final_comb, main="Combinations of heuristics for Local Search",
xlab="Combination Index", ylab="Percentage remaining of max-flow")
# Create boxplot of best max-flow ~ comb index (SMALL)
boxplot(best.max.flow~comb,data=final_comb20, main="Heuristic combinations for Local Search (SMALL)",
xlab="Combination Index", ylab="Best max-flow of Local Search")
# Create boxplot of best max-flow ~ comb index (MED)
boxplot(best.max.flow~comb,data=final_comb200, main="Heuristic combinations for Local Search (MEDIUM)",
xlab="Combination Index", ylab="Best max-flow of Local Search")
# Create boxplot of best max-flow ~ p (LARGE)
boxplot(best.max.flow~comb,data=final_comb2000, main="Heuristic combinations for Local Search (LARGE)",
xlab="Combination Index", ylab="Best max-flow of Local Search")
# Create plots of average best max flow and average percentage for each combination
final_avrp = c(avr_pct_ccf,avr_pct_ccs,
avr_pct_ctf,avr_pct_cts,
avr_pct_acf,avr_pct_acs,
avr_pct_atf,avr_pct_ats)
final_avr = c(avr_ccf,avr_ccs,
avr_ctf,avr_cts,
avr_acf,avr_acs,
avr_atf,avr_ats)
plot(final_combinations,final_avr,xlab='Combination Index',ylab='Average best max-flow value',main = 'Combinations of heuristics for Local Search')
plot(final_combinations,final_avrp,xlab='Combination Index',ylab='Average percentage remaining max-flow',main='Combinations of heuristics for Local Search')
#
# Couple up the algorithms
#
# Create plots of average best max flow and average percentage for each combination
final_avrp2 = c((avr_pct_ccf+avr_pct_ats),(avr_pct_ccs+avr_pct_atf),
(avr_pct_ctf+avr_pct_acs),(avr_pct_cts+avr_pct_acf))
final_avr2 = c((avr_ccf+avr_ats),(avr_ccs+avr_atf),
(avr_ctf+avr_acs),(avr_cts+avr_acf))
final_combinations2 = c(13,15,16,18)
plot(final_combinations2,final_avr2,xlab='Combination Index',ylab='Average best max-flow value',main = 'Combinations of heuristics for Local Search')
plot(final_combinations2,final_avrp2,xlab='Combination Index',ylab='Average percentage remaining max-flow',main='Combinations of heuristics for Local Search')
# JEG VÆLGER COMB 13 OG 27 : CCF OG ATS!!!!!
